"""
Модель MTV (Model-Template-View) — это архитектурный шаблон, который используется в веб-фреймворке Django для
организации кода.

Основной принцип - разделяй и властвуй, т.е. нужно стараться, чтобы функционал сайта был максимально разделен на
отдельные приложения (основное приложение, форум, опросник и т.д.)

Для создания приложения нужно в терминале перейти в каталог проекта (mysitedjango), при этом виртуальное окружение
должно быть активно и прописать команду:

python manage.py startapp women

где women - это название приложения. Появится новый каталог woman как пакет.
migrations - хранение миграции БД
admin - настройка admin панели сайта
app - настройка и конфигурирование текущего приложения
models - хранение ORM-моделей для взаимодействия с БД
tests - тестирующие процедуры
views - для хранения представлений текущего приложения

После этого, созданное приложение необходимо зарегистрировать, для этого переходим в папку конфигурации -> settings.py
и там, в коллекцию INSTALLED_APPS прописываем имя приложение и путь к настройкам: woman.apps.WomanConfig

"""

"""
Model (Модель)
Модель отвечает за работу с данными. Она определяет структуру данных, взаимодействует с базой данных и обеспечивает 
валидацию данных. 

Она описывает структуру данных (таблицы в базе данных).
Определяет связи между данными (например, один ко многим, многие ко многим).
Обеспечивает валидацию данных перед сохранением в базу данных.
Предоставляет методы для работы с данными (создание, чтение, обновление, удаление — CRUD).
"""

"Пример модели"
from django.db import models


class Article(models.Model):
    """
    Article — это модель, которая представляет статью.
    Поля title, content и published_date соответствуют колонкам в таблице базы данных.
    Метод __str__ определяет, как объект будет отображаться в админке Django.
    """
    title = models.CharField(max_length=100)
    content = models.TextField()
    published_date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title


"""
Template (Шаблон). Шаблон отвечает за отображение данных. Это HTML-файлы, которые определяют, как данные будут 
представлены пользователю.

Что делает Template:
Определяет структуру HTML-страницы.
Позволяет вставлять динамические данные с помощью специального синтаксиса Django (например, {{ variable }}).
Поддерживает наследование шаблонов, что позволяет избежать дублирования кода.
"""

"""Пример шаблона, где {{ article.title }}, {{ article.content }} и {{ article.published_date }} — это динамические 
данные, которые передаются из View.:

<!DOCTYPE html>
<html>
<head>
    <title>{{ article.title }}</title>
</head>
<body>
    <h1>{{ article.title }}</h1>
    <p>{{ article.content }}</p>
    <p>Опубликовано: {{ article.published_date }}</p>
</body>
</html>
"""

"""
View (Представление). View отвечает за логику обработки запросов и возврат ответа. Это связующее звено между Model и 
Template.

Что делает View:
Обрабатывает HTTP-запросы (GET, POST и т.д.).
Получает данные из Model.
Передает данные в Template для отображения.
Возвращает HTTP-ответ (обычно HTML-страницу).
"""

"""Пример View, где article_detail — это функция View.
get_object_or_404 получает объект Article из базы данных или возвращает ошибку 404, если объект не найден.
render объединяет шаблон article_detail.html с данными и возвращает HTML-страницу:"""

from django.shortcuts import render, get_object_or_404


def article_detail(request, article_id):
    article = get_object_or_404(Article, id=article_id)
    return render(request, 'article_detail.html', {'article': article})
